*&---------------------------------------------------------------------*
*& REPORT ZAADT_VKJ
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZAADT_VKJ.

CLASS LCL_REPORT DEFINITION.
  PUBLIC SECTION.
    DATA: T_DATA   TYPE STANDARD TABLE OF ZDEPLOYED_TOOLS. " OUTPUT DAT
    METHODS:
      GET_DATA,
      GENERATE_RIGHT_SEC.

    CLASS-METHODS: ON_DOUBLE_CLICK                 " DOUBLE_CLICK
         FOR EVENT IF_SALV_EVENTS_ACTIONS_TABLE~DOUBLE_CLICK OF CL_SALV_EVENTS_TABLE IMPORTING ROW COLUMN.
ENDCLASS.
DATA: LO_REPORT TYPE REF TO LCL_REPORT,
      GIT_LOG   TYPE TABLE OF BAPIRET2.
** SELECTION SCREEN
SELECTION-SCREEN: BEGIN OF BLOCK BLK1 WITH FRAME TITLE TEXT-AAA.
*PARAMETERS:R_DOWN TYPE CHAR1 RADIOBUTTON GROUP RG2,
*           R_UP   TYPE CHAR1 RADIOBUTTON GROUP RG2.

*SELECTION-SCREEN: BEGIN OF BLOCK BLK2 WITH FRAME TITLE BBB.
*PARAMETERS:R_TEXT TYPE CHAR1 RADIOBUTTON GROUP RG1,
*           R_XL   TYPE CHAR1 RADIOBUTTON GROUP RG1,
*           R_ZIP  TYPE CHAR1 RADIOBUTTON GROUP RG1.
*SELECTION-SCREEN: END OF BLOCK BLK2.

PARAMETERS:P_DB    TYPE CHAR10 DEFAULT 'HDB' MODIF ID ALL NO-DISPLAY,
           P_EHP   TYPE HOST   DEFAULT 'aaesaws0189'  MODIF ID ALL NO-DISPLAY,
           P_INST  TYPE C      LENGTH  10   DEFAULT '0020813433'     MODIF ID ALL NO-DISPLAY,
           P_DCLNT TYPE MANDT  DEFAULT '100' MODIF ID ALL NO-DISPLAY.
*PARAMETERS:P_DB    TYPE CHAR10 DEFAULT SY-DBSYS MODIF ID ALL,
*           P_EHP   TYPE HOST   DEFAULT SY-HOST  MODIF ID ALL,
*           P_INST  TYPE C       LENGTH  10  DEFAULT '0020813433'      MODIF ID ALL,
*           P_DCLNT TYPE MANDT  DEFAULT SY-MANDT MODIF ID ALL.
PARAMETERS:P_TFILE TYPE RLGRAP-FILENAME.
SELECTION-SCREEN: END   OF BLOCK BLK1.
*
** INITIALIZATION
INITIALIZATION.
*  AAA = 'TECHNICAL TOOL DEPLOYMENT'.
*  BBB = 'PLEASE SELECT FILE FORMAT FOR INPUT/OUTPUT'.


* OBJECT FOR THE REPORT
  CREATE OBJECT LO_REPORT.
  LO_REPORT->GET_DATA( ).
* GENERATE OUTPUT
  LO_REPORT->GENERATE_RIGHT_SEC( ).



AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_TFILE.
  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      FIELD_NAME = 'P_TFILE'
    IMPORTING
      FILE_NAME  = P_TFILE.
*
** START OF SELECTION
START-OF-SELECTION.

* GET DATA
* LOOP AT LO_REPORT->T_DATA ASSIGNING FIELD-SYMBOL(<LFS_TABLE>). "SNIPPET TO ADD TEST DATA
*  DATA:LWA_DATA LIKE LINE OF LO_REPORT->T_DATA.
*  IF SY-TABIX = 2.
**  ASSIGN LWA_DATA TO FIELD-SYMBOL(<LFS_TABLE>).
*  <LFS_TABLE>-OBJ_VER = '03'.
*  <LFS_TABLE>-OBJ_NAME = 'ZAADT_WRAPPER_TEST'.
*  <LFS_TABLE>-OBJ_DESC = 'DELETION TEST'.
*  INSERT ZDEPLOYED_TOOLS FROM <LFS_TABLE>.
*  ENDIF.
**    DELETE ZDEPLOYED_TOOLS  FROM <LFS_TABLE>.
*  ENDLOOP.
*
*  SELECT *
*    FROM ZDEPLOYED_CODE INTO TABLE @DATA(LIT_CODE).
*  LOOP AT LIT_CODE ASSIGNING FIELD-SYMBOL(<LFS_CODE>).
*    DELETE ZDEPLOYED_CODE FROM <LFS_CODE>.
*  ENDLOOP.

  DATA:GO_CIPHER TYPE REF TO ZCL_CIPHER.
  DATA:GV_KEY TYPE STRING.
  DATA:SOURCE     TYPE TABLE OF STRING,
       LWA_SOURCE TYPE STRING,
       LWA_DCODE  TYPE ZDEPLOYED_CODE,
       LIT_DCODE  TYPE TABLE OF ZDEPLOYED_CODE.
  PERFORM GENERATE_KEY.
  IF GO_CIPHER IS INITIAL.
    CREATE OBJECT GO_CIPHER
      EXPORTING
        KEY_VAL = GV_KEY.
  ENDIF.

  delete from ZJUNK_COLCTR.
  READ REPORT 'ZCONSOLIDATION_TR' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.

      LWA_DCODE-OBJ_NAME = 'ZCONSOLIDATION_TR' .
      LWA_DCODE-LINE_NO = SY-TABIX .

      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.
*    DATA:LO_ENC TYPE REF TO ZCL_CIPHER.

  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.

  READ REPORT 'ZS4_HANA_TOOL1' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.

      LWA_DCODE-OBJ_NAME = 'ZS4_PROFILER' .
      LWA_DCODE-LINE_NO = SY-TABIX .

      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.

*    DATA:LO_ENC TYPE REF TO ZCL_CIPHER.

    MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.

***  **********************************
  READ REPORT 'ZUPLOAD_VALUE' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.
      LWA_DCODE-OBJ_NAME = 'ZUPLOAD_VALUE' .
      LWA_DCODE-LINE_NO = SY-TABIX .
      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.
  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.
  ENDIF.
*  **********************************
  READ REPORT 'ZSEARCH' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.

      LWA_DCODE-OBJ_NAME = 'ZSEARCH_HELP_UTILITY' .
      LWA_DCODE-LINE_NO = SY-TABIX .

      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.

  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.
*  **********************************
  READ REPORT 'ZUSAGE_ANALYSIS' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.

      LWA_DCODE-OBJ_NAME = 'ZUSAGE_ANALYSIS' .
      LWA_DCODE-LINE_NO = SY-TABIX .

      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.

  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.
*  **********************************
    READ REPORT 'ZTEST_IDOC' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.

      LWA_DCODE-OBJ_NAME = 'ZIMPACTED_IDOC' .
      LWA_DCODE-LINE_NO = SY-TABIX .

      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.

  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.
*  **********************************
    READ REPORT 'ZAFFECTED_OBJECT_LIST' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.

      LWA_DCODE-OBJ_NAME = 'ZIMPACTED_TABLE' .
      LWA_DCODE-LINE_NO = SY-TABIX .

      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.

  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.
*  **********************************
*    READ REPORT 'ZBADI' INTO SOURCE.
    READ REPORT 'ZCONSOLIDATION_EHP4' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.

      LWA_DCODE-OBJ_NAME = 'ZIMPACTED_BADI' .
      LWA_DCODE-LINE_NO = SY-TABIX .

      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.

  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.
*  **********************************
    READ REPORT 'Z_ENH_FLOWCHART' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.

      LWA_DCODE-OBJ_NAME = 'ZFIND_ENHANCEMENTS' .
      LWA_DCODE-LINE_NO = SY-TABIX .

      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.

  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.
*  **********************************
    READ REPORT 'ZCLONE_ANALYSIS' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.

      LWA_DCODE-OBJ_NAME = 'ZCLONE_ANALYSIS' .
      LWA_DCODE-LINE_NO = SY-TABIX .

      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.

  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.
*  **********************************
      READ REPORT 'ZP_AADT_ACC_TOOLS' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.

      LWA_DCODE-OBJ_NAME = 'ZACC_TOOLS1' .
      LWA_DCODE-LINE_NO = SY-TABIX .

      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.

  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.

***  **********************************
  READ REPORT 'ZAADT_WERUSD_LIST' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.
      LWA_DCODE-OBJ_NAME = 'ZAADT_WERUSD_LIST' .
      LWA_DCODE-LINE_NO = SY-TABIX .
      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.
  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.
***  **********************************
  READ REPORT 'ZAADT_DOMAIN_CALL' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.
      LWA_DCODE-OBJ_NAME = 'ZAADT_DOMAIN_CALL' .
      LWA_DCODE-LINE_NO = SY-TABIX .
      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.
  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.
***  **********************************
  READ REPORT 'ZAADX_CALL_MATNR' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.
      LWA_DCODE-OBJ_NAME = 'ZAADX_CALL_MATNR' .
      LWA_DCODE-LINE_NO = SY-TABIX .
*      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
*        EXPORTING
*          THE_STRING = LWA_SOURCE
*        RECEIVING
*          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.
  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.
***********************************************
***  **********************************
  READ REPORT 'ZAADT_WERUSD_PROG' INTO SOURCE.
  IF SY-SUBRC = 0.
    LOOP AT SOURCE INTO LWA_SOURCE.
      LWA_DCODE-OBJ_NAME = 'ZAADT_WERUSD_PROG' .
      LWA_DCODE-LINE_NO = SY-TABIX .
      CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
        EXPORTING
          THE_STRING = LWA_SOURCE
        RECEIVING
          RESULT     = LWA_SOURCE.
      MOVE LWA_SOURCE TO LWA_DCODE-CODE_LINE.
      APPEND LWA_DCODE TO LIT_DCODE.
    ENDLOOP.
    CLEAR LWA_DCODE.
  ENDIF.
  MODIFY  ZJUNK_COLCTR  FROM TABLE LIT_DCODE.
  REFRESH SOURCE.
*----------------------------------------------------------------------*
* LOCAL CLASS IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS LCL_REPORT IMPLEMENTATION.
*
  METHOD GET_DATA.
*
*   DATA SELECTION
    SELECT * FROM ZDEPLOYED_TOOLS
           INTO  TABLE ME->T_DATA.

    SORT ME->T_DATA BY OBJ_VER DESCENDING.

*    DELETE ADJACENT DUPLICATES FROM ME->T_DATA COMPARING OBJ_NAME.

  ENDMETHOD.                    "GET_DATA
*
  METHOD GENERATE_RIGHT_SEC.
*
*   LOCAL DATA
    DATA: LO_DOCK       TYPE REF TO CL_GUI_DOCKING_CONTAINER,
          LO_CONT       TYPE REF TO CL_GUI_CONTAINER,
          LO_ALV        TYPE REF TO CL_SALV_TABLE,
          LO_FUNCTIONS  TYPE REF TO CL_SALV_FUNCTIONS_LIST,
          LO_SELECTIONS TYPE REF TO CL_SALV_SELECTIONS,
          LO_COLUMNS    TYPE REF TO CL_SALV_COLUMNS_TABLE,
          LO_COLUMN     TYPE REF TO CL_SALV_COLUMN,
          LR_EVENTS     TYPE REF TO CL_SALV_EVENTS_TABLE,

          LO_SPLITTER   TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
          LO_CELL_LEFT  TYPE REF TO CL_GUI_CONTAINER,
          LO_CELL_RIGHT TYPE REF TO CL_GUI_CONTAINER,


          LO_ALV1       TYPE REF TO CL_SALV_TABLE,
          LO_FUNCTIONS1 TYPE REF TO CL_SALV_FUNCTIONS_LIST,
          LO_COLUMNS1   TYPE REF TO CL_SALV_COLUMNS_TABLE,
          LO_COLUMN1    TYPE REF TO CL_SALV_COLUMN.

*   IMPORT OUTPUT TABLE FROM THE MEMORY AND FREE AFTERWARDS
*    IMPORT DATA = ME->T_DATA FROM MEMORY ID SY-CPROG.
*    FREE MEMORY ID SY-CPROG.
*
*   ONLY IF THERE IS SOME DATA
    CHECK ME->T_DATA IS NOT INITIAL.
*
*   CREATE A DOCKING CONTROL AT BOTTOM
*    CHECK LO_DOCK IS INITIAL.
    CREATE OBJECT LO_DOCK
      EXPORTING
        REPID = SY-CPROG
        DYNNR = SY-DYNNR
        RATIO = 75
        SIDE  = CL_GUI_DOCKING_CONTAINER=>DOCK_AT_BOTTOM
        NAME  = 'DOCK_CONT'.
    IF SY-SUBRC <> 0.
      MESSAGE 'ERROR IN THE DOCKING CONTROL' TYPE 'S'.
    ENDIF.

*   CREATE A SALV FOR OUTPUT
    CHECK LO_ALV IS INITIAL.
    TRY.
*       NARROW CASTING: TO INITIALIZE CUSTOM CONTAINER FROM
*       DOCKING CONTAINER
        LO_CONT ?= LO_DOCK.

        CREATE OBJECT LO_SPLITTER
          EXPORTING
            PARENT     = LO_CONT
            LINK_REPID = SY-CPROG
            LINK_DYNNR = SY-DYNNR
            ROWS       = 1
            COLUMNS    = 2
            NAME       = 'SPLIT_DOCK'.


        DATA: LV_RESULT TYPE I.
        CALL METHOD LO_SPLITTER->SET_COLUMN_WIDTH
          EXPORTING
            ID                = 2
            WIDTH             = 30
          IMPORTING
            RESULT            = LV_RESULT
          EXCEPTIONS
            CNTL_ERROR        = 1
            CNTL_SYSTEM_ERROR = 2
            OTHERS            = 3.

        CALL METHOD LO_SPLITTER->GET_COLUMN_WIDTH
          EXPORTING
            ID                = 1
          IMPORTING
            RESULT            = LV_RESULT
          EXCEPTIONS
            CNTL_ERROR        = 1
            CNTL_SYSTEM_ERROR = 2
            OTHERS            = 3.
        IF SY-SUBRC <> 0.
* IMPLEMENT SUITABLE ERROR HANDLING HERE
        ENDIF.


        CALL METHOD LO_SPLITTER->GET_CONTAINER
          EXPORTING
            ROW       = 1
            COLUMN    = 2
          RECEIVING
            CONTAINER = LO_CELL_RIGHT.

        CALL METHOD LO_SPLITTER->GET_CONTAINER
          EXPORTING
            ROW       = 1
            COLUMN    = 1
          RECEIVING
            CONTAINER = LO_CELL_LEFT.

*       SALV TABLE DISPLAY ON THE DOCKING CONTAINER
        CALL METHOD CL_SALV_TABLE=>FACTORY
          EXPORTING
            LIST_DISPLAY = IF_SALV_C_BOOL_SAP=>FALSE
            R_CONTAINER  = LO_CELL_RIGHT
*           CONTAINER_NAME = 'DOCK_CONT'
          IMPORTING
            R_SALV_TABLE = LO_ALV
          CHANGING
            T_TABLE      = ME->T_DATA.
      CATCH CX_SALV_MSG .
    ENDTRY.
*
*   PF STATUS
*    DATA: LO_FUNCTIONS TYPE REF TO CL_SALV_FUNCTIONS_LIST.
    LO_FUNCTIONS = LO_ALV->GET_FUNCTIONS( ).
    LO_FUNCTIONS->SET_SORT_ASC( ABAP_TRUE ).
    LO_FUNCTIONS->SET_SORT_DESC( ABAP_TRUE ).
    LO_FUNCTIONS->SET_FIND( ABAP_TRUE ).

*    DATA : LO_SELECTIONS TYPE REF TO CL_SALV_SELECTIONS.
    LO_SELECTIONS = LO_ALV->GET_SELECTIONS( ).

    CALL METHOD LO_SELECTIONS->SET_SELECTION_MODE
      EXPORTING
        VALUE = IF_SALV_C_SELECTION_MODE=>SINGLE.


    LO_COLUMNS = LO_ALV->GET_COLUMNS( ).

    LO_COLUMNS->SET_OPTIMIZE( ABAP_TRUE ).
*    TRY.
*        LO_COLUMN = LO_COLUMNS->GET_COLUMN( 'OBJ_VER' ).
*        LO_COLUMN->SET_VISIBLE( ABAP_FALSE ).
*
*      CATCH CX_SALV_NOT_FOUND.                          "#EC NO_HANDLER
*    ENDTRY.


    LR_EVENTS = LO_ALV->GET_EVENT( ).
    SET HANDLER LCL_REPORT=>ON_DOUBLE_CLICK FOR LR_EVENTS.

*   OUTPUT DISPLAY
    LO_ALV->DISPLAY( ).

    DATA:LWA_LOG TYPE BAPIRET2.
    CLEAR:LWA_LOG.
    LWA_LOG-TYPE = 'S'.
    LWA_LOG-MESSAGE ='THIS IS A TEXT MESSAGE'.

    APPEND LWA_LOG TO GIT_LOG.
    TRY.
        CALL METHOD CL_SALV_TABLE=>FACTORY
          EXPORTING
            LIST_DISPLAY = IF_SALV_C_BOOL_SAP=>FALSE
            R_CONTAINER  = LO_CELL_LEFT
          IMPORTING
            R_SALV_TABLE = LO_ALV1
          CHANGING
            T_TABLE      = GIT_LOG.
      CATCH CX_SALV_MSG .
    ENDTRY.
    LO_FUNCTIONS1 = LO_ALV1->GET_FUNCTIONS( ).
    LO_FUNCTIONS1->SET_DEFAULT( ABAP_TRUE ).

    LO_ALV1->DISPLAY( ).
  ENDMETHOD.                    "GENERATE_OUTPUT
  METHOD ON_DOUBLE_CLICK.
    DATA: LWA_DATA LIKE LINE OF LO_REPORT->T_DATA.
    READ TABLE LO_REPORT->T_DATA INTO LWA_DATA INDEX ROW.
    IF SY-SUBRC = 0.
      CASE ROW.
        WHEN 2.
*          SUBMIT (LWA_DATA-OBJ_NAME) AND RETURN.,
        WHEN 1.
          PERFORM GENERATE_KEY.
          IF GO_CIPHER IS INITIAL.
            CREATE OBJECT GO_CIPHER
              EXPORTING
                KEY_VAL = GV_KEY.
          ENDIF.

*          BREAK-POINT.
          SELECT * FROM ZDEPLOYED_CODE INTO TABLE @DATA(LIT_CODE) WHERE OBJ_NAME = @LWA_DATA-OBJ_NAME ORDER BY LINE_NO.
          DATA:LIT_SOURCE TYPE TABLE OF STRING,
               LWA_SOURCE TYPE STRING.
          LOOP AT LIT_CODE ASSIGNING FIELD-SYMBOL(<LFS_CODE>).
            CLEAR LWA_SOURCE.
            LWA_SOURCE = <LFS_CODE>-CODE_LINE.

            CALL METHOD GO_CIPHER->DECRYPT_STRING2STRING
              EXPORTING
                THE_STRING = LWA_SOURCE
              RECEIVING
                RESULT     = LWA_SOURCE.

            APPEND LWA_SOURCE TO LIT_SOURCE.
          ENDLOOP.
          DATA:LV_PNAME TYPE CHAR40 VALUE 'ZACCENTURE_TOOLS1'.
          INSERT REPORT LV_PNAME FROM LIT_SOURCE PROGRAM TYPE '1'.
          IF SY-SUBRC = 0.
            SUBMIT (LV_PNAME) VIA SELECTION-SCREEN AND RETURN.
*            DELETE REPORT LV_PNAME.
          ENDIF.
        WHEN OTHERS.
      ENDCASE.
    ENDIF.
  ENDMETHOD.
ENDCLASS.                    "LCL_REPORT IMPLEMENTATION
FORM GENERATE_KEY.
  DATA:LV_INDEX(1) TYPE C.
  IF GV_KEY IS INITIAL.

    IF P_DB IS NOT INITIAL.
      DATA(LV_LEN) = STRLEN( P_DB ).
      LV_LEN = 8 - LV_LEN.
      IF LV_LEN GT 0.
        DO LV_LEN TIMES.

          MOVE SY-INDEX TO LV_INDEX.
          CONCATENATE P_DB LV_INDEX INTO P_DB.
        ENDDO.
      ENDIF.
    ENDIF.
    IF P_EHP IS NOT INITIAL.
      LV_LEN = STRLEN( P_EHP ).
      LV_LEN = 32 - LV_LEN.
      IF LV_LEN GT 0.
        DO LV_LEN TIMES.
          MOVE SY-INDEX TO LV_INDEX.
          CONCATENATE P_EHP LV_INDEX INTO P_EHP.
        ENDDO.
      ENDIF.
    ENDIF.
    IF P_INST IS NOT INITIAL.
      LV_LEN = STRLEN( P_INST ).
      LV_LEN = 32 - LV_LEN.
      IF LV_LEN GT 0.
        DO LV_LEN TIMES.
          MOVE SY-INDEX TO LV_INDEX.
          CONCATENATE P_INST LV_INDEX INTO P_INST.
        ENDDO.
      ENDIF.
    ENDIF.
    CONCATENATE P_DB P_EHP P_INST P_DCLNT INTO GV_KEY.

    IF GO_CIPHER IS INITIAL.
      CREATE OBJECT GO_CIPHER
        EXPORTING
          KEY_VAL = GV_KEY.
    ENDIF.
*    DATA:LV_MESSAGE TYPE STRING VALUE 'IF YOU CAN READ THIS THEN DECRYPTION KEY GENERATION IS SUCCESSFUL.'.
*    CALL METHOD GO_CIPHER->ENCRYPT_STRING2STRING
*      EXPORTING
*        THE_STRING = LV_MESSAGE
*      RECEIVING
*        RESULT     = LV_MESSAGE.
*
*    DATA:LWA_FINAL TYPE ZAADT_FORMAT_STRU.
*    LWA_FINAL-OBJ_TYPE = 'TEST'.
*    LWA_FINAL-OBJ_NAME = 'MESSAGE'.
*    LWA_FINAL-OBJ_REF  = 'ENCR'.
*    LWA_FINAL-OBJ_DATA = LV_MESSAGE.
*    LWA_FINAL-ENCRYPT  = ABAP_TRUE.
*    LWA_FINAL-LOAD_PRIORITY = 999.
*    APPEND LWA_FINAL TO LIT_FINAL.

*    CLEAR GWA_LOG.
*    GWA_LOG-STATUS = '@08@'.
*    GWA_LOG-MTYPE  = 'S'.
*    GWA_LOG-MESSAGE = 'KEY GENERATION SUCCESSFUL.'.
*    APPEND GWA_LOG TO GIT_LOG.
*    CLEAR GWA_LOG.
  ENDIF.
ENDFORM.
